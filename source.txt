EXP1: AIM: IMPLEMENTATION OF TWO PASS ASSEMBLER

STEP1: SAVE BELOW CODE IN FILENAME.C
STEP2: cd into the folder where code is saved and type below commands

$ gcc -o exp1_twopassassembler exp1_twopassassembler.c
$ gcc -o exp1_twopassassembler exp1_twopassassembler.c
$ ./exp1_twopassassembler



#include <stdio.h>
#include <string.h>

void main()
{
    char *code[9][4] = {
        {"PRG1", "START", "", ""},
        {"", "USING", "*", "15"},
        {"", "L", "", ""},
        {"", "A", "", ""},
        {"", "ST", "", ""},
        {"FOUR", "DC", "F", ""},
        {"FIVE", "DC", "F", ""},
        {"TEMP", "DS", "1F", ""},
        {"", "END", "", ""}};
    char av[2], avail[15] = {'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N', 'N'};
    int i, j, k, count[3], lc[9] = {0, 0, 0, 0, 0, 0, 0, 0, 0}, loc = 0;
    printf("----------------------------------------------------\n");
    printf("LABEL\t\tOPCODE\n");
    printf("----------------------------------------------------\n\n");
    for (i = 0; i <= 8; i++)
    {
        for (j = 0; j <= 3; j++)
        {
            printf("%s\t\t", code[i][j]);
        }
        j = 0;
        printf("\n");
    }
    printf("-----------------------------------------------------");
    printf("\nVALUES FOR LC : \n\n");
    for (j = 0; j <= 8; j++)
    {
        if ((strcmp(code[j][1], "START") != 0) && (strcmp(code[j][1], "USING") != 0) && (strcmp(code[j][1], "L") != 0))
            lc[j] = lc[j - 1] + 4;
        printf("%d\t", lc[j]);
    }
    printf("\n\nSYMBOL TABLE:\n----------------------------------------------------\n");
    printf("SYMBOL\t\tVALUE\t\tLENGTH\t\tR/A");
    printf("\n----------------------------------------------------\n");
    for (i = 0; i < 9; i++)
    {
        if (strcmp(code[i][1], "START") == 0)
        {
            printf("%s\t\t%d\t\t%d\t\t%c\n", code[i][0], loc, 4, 'R');
        }
        else if (strcmp(code[i][0], "") != 0)
        {
            printf("%s\t\t%d\t\t%d\t\t%c\n", code[i][0], loc, 4, 'R');
            loc = 4 + loc;
        }
        else if (strcmp(code[i][1], "USING") == 0)
        {
        }
        else
        {
            loc = 4 + loc;
        }
    }
    printf("----------------------------------------------------");
    printf("\n\nBASE TABLE:\n-------------------------------------------------------\n");
    printf("REG NO\t\tAVAILIBILITY\tCONTENTS OF BASE TABLE");
    printf("\n-------------------------------------------------------\n");
    for (j = 0; j <= 8; j++)
    {
        if (strcmp(code[j][1], "USING") != 0)
        {
        }
        else
        {
            strcpy(av, code[j][3]);
        }
    }
    count[0] = (int)av[0] - 48;
    count[1] = (int)av[1] - 48;
    count[2] = count[0] * 10 + count[1];
    avail[count[2] - 1] = 'Y';
    for (k = 0; k < 16; k++)
    {
        printf(" %d\t\t %c\n", k, avail[k - 1]);
    }
    printf("-------------------------------------------------------\n");
    printf("Continue..??");
    getchar();
    printf("PASS2 TABLE:\n\n");
    printf("LABEL\t\tOP1\t\tLC\t\t");
    printf("\n----------------------------------------------------\n");
    loc = 0;
    for (i = 0; i <= 8; i++)
    {
        for (j = 0; j <= 3; j++)
        {
            printf("%s\t\t", code[i][j]);
        }
        j = 0;
        printf("\n");
    }
    printf("-----------------------------------------------------");
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------------









EXP2: AIM: IMPLEMENTATION OF TWO PASS MICRO PROCESSOR

STEP1: COPY PASTE CODE INTO TEXT EDITOR AND SAVE THE FILE WITH "FILENAME".C 

STEP2: IN THAT SAME FOLDER WHERE YOU SAVED THE "FILENAME".C  CREATE A ANOTHER FILE WITH NAME AS MACIN.DAT AND PASTE CODE AS IT IS

STEP3: RUN THE .C FILE AND IT WILL GENERATE OUTPUT AND TWO FILES MACOUT.DAT AND DEFTAB.DAT   --DONE!!!
FOR RUNNING THE CODE TYPE FOLLOWING COMMANDS

$ gcc -o exp2_twopassmacro exp2_twopassmacro.c
$ gcc -o exp2_twopassmacro exp2_twopassmacro.c
$ ./exp2_twopassmacro




MACIN.DAT

CALC START 1000
SUM MACRO **
** LDA #5
** ADD #10
** STA 2000
** MEND **
** LDA LENGTH
** COMP ZERO
** JEQ LOOP
** SUM **
LENGTH WORD 5
ZERO WORD 0
LOOP SUM **
** END **



CODE:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct deftab
{
    char lab[10];
    char opc[10];
    char oper[10];
} d[10];

int main()
{
    char label[10], opcode[10], operand[10];
    char macroname[10];
    int i, lines = 0;
    FILE *f1, *f2, *f3;
    struct deftab d[10]; // Declare the 'd' array here
    f1 = fopen("macin.dat", "r");
    f2 = fopen("macout.dat", "w");
    f3 = fopen("deftab.dat", "w");

    fscanf(f1, "%s %s %s", label, opcode, operand);
    fprintf(f2, "%s %s %s", label, opcode, operand);
    while (strcmp(opcode, "END") != 0)
    {
        fscanf(f1, "%s %s %s", label, opcode, operand);

        if (strcmp(opcode, "MACRO") == 0)
        {
            strcpy(macroname, label);
            fprintf(f2, "%s %s %s", label, opcode, operand);
            lines = 0;
            while (strcmp(opcode, "MEND") != 0)
            {
                if (strcmp(label, macroname) != 0)
                {
                    fprintf(f3, "%s\t%s\t%s\n", label, opcode, operand);
                    strcpy(d[lines].lab, label);
                    strcpy(d[lines].opc, opcode);
                    strcpy(d[lines].oper, operand);
                    fscanf(f1, "%s %s %s", label, opcode, operand);
                    lines++;
                }
                else
                    fscanf(f1, "%s %s %s", label, opcode, operand);
            }
        }
        else if (strcmp(opcode, macroname) == 0)
        {
            printf("Lines = %d\n", lines);
            for (i = 0; i < lines; i++)
            {
                fprintf(f2, "%s\t%s\t%s\n", d[i].lab, d[i].opc, d[i].oper);
                printf("DLAB = %s\nDOPC = %s\nDOPER = %s\n", d[i].lab, d[i].opc, d[i].oper);
            }
        }
        else
        {
            fprintf(f2, "%s\t%s\n", label, opcode);
        }
    }
    fclose(f1);
    fclose(f2);
    fclose(f3);
    printf("FINISHED\n");
    return 0; // Exit successfully
}



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------






EXP3: AIM: To design and implement the Lexical Analyzer.

STEP1: COPY PASTE THE CODE INTO TEXT EDITOR AND SAVE WITH .C EXTENSION 

STEP2: CREATE FILE WITH NAME AS exp3.txt AND PASTE CODE IN IT AS IT IS 

STEP3: RUN THE CODE IT WILL ASK FILENAME ENTER THE FILENAME YOU CREATED in STEP2  PREFERRABLY exp3.txt and done.


exp3.txt:

wcm:procedure(rate,start,finish); 
declare(cost,rate,start,finish);
fixedbinary(31)static;
cost=rate+(start-finish)+2*rate*(start-finish-100); 
return(cost);
end;


CODE:

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

FILE *fp;
char delim[] = {' ', '\t', '\n', ',', ';', '(', ')', '{', '}', '[', ']', '#', '<', '>'};
char keywords[][15] = {"int", "float", "char", "double", "bool", "void", "extern", "unsigned", "goto", "static", "class", "struct", "for", "if", "else", "return", "register", "long", "while", "do"};
char pre_directives[][15] = {"include", "define"};
char headers[][15] = {"stdio.h", "conio.h", "malloc.h", "process.h", "string.h", "ctype.h"};

void analyze();
int is_delim(char);
int is_keyword(char[]);
int is_pre_directive(char[]);
int is_header(char[]);

int main()
{
    char fname[50];
    printf("\nEnter filename: ");
    scanf("%s", fname);
    fp = fopen(fname, "r");
    if (fp == NULL)
    {
        printf("\nThe file does not exist.");
        return 1;
    }
    else
    {
        analyze();
        printf("\nEnd of file.\n");
        fclose(fp);
        return 0;
    }
}

void analyze()
{
    char c;
    while ((c = fgetc(fp)) != EOF)
    {
        if (isspace(c))
        {
            continue;
        }
        else if (isalpha(c))
        {
            char token[50];
            int i = 0;
            token[i++] = c;
            while ((c = fgetc(fp)) != EOF && (isalnum(c) || c == '.'))
            {
                token[i++] = c;
            }
            token[i] = '\0';
            if (is_keyword(token))
            {
                printf("\nKeyword: %s", token);
            }
            else if (is_pre_directive(token))
            {
                printf("\nPreprocessor directive: %s", token);
            }
            else if (is_header(token))
            {
                printf("\nHeader file: %s", token);
            }
            else
            {
                printf("\nIdentifier: %s", token);
            }
        }
        else if (isdigit(c))
        {
            char token[50];
            int i = 0;
            token[i++] = c;
            while ((c = fgetc(fp)) != EOF && (isdigit(c) || c == '.'))
            {
                token[i++] = c;
            }
            token[i] = '\0';
            printf("\nNumber: %s", token);
        }
        else if (is_delim(c))
        {
            printf("\nDelimiter: %c", c);
        }
    }
}

int is_delim(char c)
{
    for (int i = 0; i < sizeof(delim) / sizeof(delim[0]); i++)
    {
        if (c == delim[i])
        {
            return 1;
        }
    }
    return 0;
}

int is_keyword(char token[])
{
    for (int i = 0; i < sizeof(keywords) / sizeof(keywords[0]); i++)
    {
        if (strcmp(token, keywords[i]) == 0)
        {
            return 1;
        }
    }
    return 0;
}

int is_pre_directive(char token[])
{
    for (int i = 0; i < sizeof(pre_directives) / sizeof(pre_directives[0]); i++)
    {
        if (strcmp(token, pre_directives[i]) == 0)
        {
            return 1;
        }
    }
    return 0;
}

int is_header(char token[])
{
    for (int i = 0; i < sizeof(headers) / sizeof(headers[0]); i++)
    {
        if (strcmp(token, headers[i]) == 0)
        {
            return 1;
        }
    }
    return 0;
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





EXP4:  
AIM: DESIGN AND IMPLEMENT OPERATOR PRECEDENCE PARSER

STEP1: RUN THE CODE
STEP2: IT WILL ASK FOR STRING ENTER "i*(i+i)*i" OR ANY OTHER STRING OF YOUR CHOICE AND DONE.

CODE: 

#include <stdio.h>
#include <string.h>
#include <malloc.h>

char *input;
int i = 0;
char lasthandle[6], stack[50], handles[][5] = {")E(", "E*E", "E+E", "i", "E^E"};
int top = 0, l;
char prec[9][9] = {
    /*input*/
    /*stack + - * / ^ i ( ) $ */
    /* + */ '>', '>','<','<','<','<','<','>','>',
    /* - */ '>', '>','<','<','<','<','<','>','>',
    /* * */ '>', '>','>','>','<','<','<','>','>',
    /* / */ '>', '>','>','>','<','<','<','>','>',
    /* ^ */ '>', '>','>','>','<','<','<','>','>',
    /* i */ '>', '>','>','>','>','e','e','>','>',
    /* ( */ '<', '<','<','<','<','<','<','>','e',
    /* ) */ '>', '>','>','>','>','e','e','>','>',
    /* $ */ '<', '<','<','<','<','<','<','<','>',
};

int getindex(char c)
{
    switch (c)
    {
    case '+':
        return 0;
    case '-':
        return 1;
    case '*':
        return 2;
    case '/':
        return 3;
    case '^':
        return 4;
    case 'i':
        return 5;
    case '(':
        return 6;
    case ')':
        return 7;
    case '$':
        return 8;
    }
}

int shift()
{
    stack[++top] = *(input + i++);
    stack[top + 1] = '\0';
}
int reduce()
{
    int i, len, found, t;
    for (i = 0; i < 5; i++) // selecting handles
    {
        len = strlen(handles[i]);
        if (stack[top] == handles[i][0] && top + 1 >= len)
        {
            found = 1;
            for (t = 0; t < len; t++)
            {
                if (stack[top - t] != handles[i][t])
                {
                    found = 0;
                    break;
                }
            }
            if (found == 1)
            {
                stack[top - t + 1] = 'E';
                top = top - t + 1;
                strcpy(lasthandle, handles[i]);
                stack[top + 1] = '\0';
                return 1; // successful reduction
            }
        }
    }
    return 0;
}

void dispstack()
{
    int j;
    for (j = 0; j <= top; j++)
        printf("%c", stack[j]);
}

void dispinput()
{
    int j;
    for (j = i; j < l; j++)
        printf("%c", *(input + j));
}

void main()
{
    int j;
    input = (char *)malloc(50 * sizeof(char));
    printf("\nEnter the string: ");
    scanf("%s", input);
    input = strcat(input, "$");
    l = strlen(input);
    strcpy(stack, "$");
    printf("\nSTACK\tINPUT\t\t\tACTION");
    while (i <= l)
    {
        shift();
        printf("\n");
        dispstack();
        printf("\t");
        dispinput();
        printf("\t\t\tShift");
        if (prec[getindex(stack[top])][getindex(input[i])] == '>')
        {
            while (reduce())
            {
                printf("\n");
                dispstack();
                printf("\t");
                dispinput();
                printf("\t\t\tReduced: E->%s", lasthandle);
            }
        }
    }
    if (strcmp(stack, "$E$") == 0)
        printf("\nAccepted;");
    else
        printf("\nNot Accepted;");
}





------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------








EXP5: Aim: Implementation of different code optimization techniques

STEP1: RUN THE CODE IT WILL ASK FOR THE NUMBER OF VALUES ENTER '5' AND PROCEED
STEP2: ENTER FOLLOWING FOR LEFT AND RIGHT WHEN ASKED

left: a
right: 9
left: b
right: c+d
left: e
right: c+d
left: f
right: b+e
left: r
right: f



CODE:

#include <stdio.h>
#include <string.h>

struct op
{
    char l;
    char r[20];
} op[10], pr[10];

void main()
{
    int a, i, k, j, n, z = 0, m, q;
    char *p, *l;
    char temp, t;
    char *tem;
    printf("Enter the Number of Values: ");
    scanf("%d", &n);
    for (i = 0; i < n; i++)
    {
        printf("left: ");
        scanf(" %c", &op[i].l);
        printf("right: ");
        scanf(" %s", &op[i].r);
    }
    printf("\nIntermediate Code\n");
    for (i = 0; i < n; i++)
    {
        printf("%c=", op[i].l);
        printf("%s\n", op[i].r);
    }
    for (i = 0; i < n - 1; i++)
    {
        temp = op[i].l;
        for (j = 0; j < n; j++)
        {
            p = strchr(op[j].r, temp);
            if (p)
            {
                pr[z].l = op[i].l;
                strcpy(pr[z].r, op[i].r);
                z++;
            }
        }
    }
    pr[z].l = op[n - 1].l;
    strcpy(pr[z].r, op[n - 1].r);
    z++;
    printf("\nAfter Dead Code Elimination\n");
    for (k = 0; k < z; k++)
    {
        printf("%c\t=", pr[k].l);
        printf("%s\n", pr[k].r);
    }
    for (m = 0; m < z; m++)
    {
        tem = pr[m].r;
        for (j = m + 1; j < z; j++)
        {
            p = strstr(tem, pr[j].r);
            if (p)
            {
                t = pr[j].l;
                pr[j].l = pr[m].l;
                for (i = 0; i < z; i++)
                {
                    l = strchr(pr[i].r, t);
                    if (l)
                    {
                        a = l - pr[i].r;
                        printf("pos: %d\n", a);
                        pr[i].r[a] = pr[m].l;
                    }
                }
            }
        }
    }
    printf("\nEliminate Common Expression\n");
    for (i = 0; i < z; i++)
    {
        printf("%c\t=", pr[i].l);
        printf("%s\n", pr[i].r);
    }
    for (i = 0; i < z; i++)
    {
        for (j = i + 1; j < z; j++)
        {
            q = strcmp(pr[i].r, pr[j].r);
            if ((pr[i].l == pr[j].l) && !q)
            {
                pr[i].l = '\0';
            }
        }
    }
    printf("\nOptimized Code\n");
    for (i = 0; i < z; i++)
    {
        if (pr[i].l != '\0')
        {
            printf("%c=", pr[i].l);
            printf("%s\n", pr[i].r);
        }
    }
}



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






EXP6: AIM: IMPLEMENTATION OF CODE GENERATION

STEP1: FISRT COPY PASTE THIS CODE INTO TEXT EDITOR AND SAVE WITH .C

STEP2: IN THAT SAME FOLDER WHERE YOU SAVE THAT .C CREATE A FILE NAME AS input.txt AND PASTE FOLLWING 

+ a b t1
* c d t2
- t1 t2 t
= t ? x


STEP3: RUN THIS CODE AND IT WILL GENERATE FILE NAME output.txt DONE!!! THE output.txt FILE IS YOUR OUTPUT


CODE:

#include <stdio.h>
#include <conio.h>
#include <string.h>

char op[2], arg1[5], arg2[5], result[5];
void main()
{
    FILE *fp1, *fp2;
    fp1 = fopen("input.txt", "r");
    fp2 = fopen("output.txt", "w");
    while (!feof(fp1))
    {
        fscanf(fp1, "%s%s%s%s", op, arg1, arg2, result);
        if (strcmp(op, "+") == 0)
        {
            fprintf(fp2, "\nMOV R0,%s", arg1);
            fprintf(fp2, "\nADD R0,%s", arg2);
            fprintf(fp2, "\nMOV %s,R0", result);
        }
        if (strcmp(op, "*") == 0)
        {
            fprintf(fp2, "\nMOV R0,%s", arg1);
            fprintf(fp2, "\nMUL R0,%s", arg2);
            fprintf(fp2, "\nMOV %s,R0", result);
        }
        if (strcmp(op, "-") == 0)
        {
            fprintf(fp2, "\nMOV R0,%s", arg1);
            fprintf(fp2, "\nSUB R0,%s", arg2);
            fprintf(fp2, "\nMOV %s,R0", result);
        }
        if (strcmp(op, "/") == 0)
        {
            fprintf(fp2, "\nMOV R0,%s", arg1);
            fprintf(fp2, "\nDIV R0,%s", arg2);
            fprintf(fp2, "\nMOV %s,R0", result);
        }
        if (strcmp(op, "=") == 0)
        {
            fprintf(fp2, "\nMOV R0,%s", arg1);
            fprintf(fp2, "\nMOV %s,R0", result);
        }
    }
    fclose(fp1);
    fclose(fp2);
    getch();
}



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------








#7 LEX and YACC
 

STEP1: CREATE BELOW LEX AND YACC FILE test1.l and test1.y
STEP2: RUN COMMANDS GIVEN AT END. DONE!!!



LEX
test1.l

%{
#include <stdio.h>
#include "y.tab.h"
extern int yylval; // Declare yylval provided by Bison
%}

%%
[0-9]+ {
    yylval = atoi(yytext);  // Convert string to integer and store in yylval
    return NUMBER;  // Return the NUMBER token
}
[\t]                 // Ignore tabs
[\n] return 0;       // Ignore newlines, but return 0 indicating end of file
. return yytext[0];  // Return any other character as is
%%

int yywrap() {
    return 1;  // Indicate end of input
}





YACC
test1.y

%{
#include <stdio.h>
int flag = 0;
int yyparse(void); // Declaration of yyparse
%}

%token NUMBER
%left '+' '-'
%left '*' '/' '%'
%left '(' ')'

%%

ArithmeticExpression: E {
    printf("\nResult=%d\n", $$);
    return 0;
};

E: E '+' E { $$ = $1 + $3; }
 | E '-' E { $$ = $1 - $3; }
 | E '*' E { $$ = $1 * $3; }
 | E '/' E { $$ = $1 / $3; }
 | E '%' E { $$ = $1 % $3; }
 | '(' E ')' { $$ = $2; }
 | NUMBER { $$ = $1; }
 ;

%%

void main() {
    printf("Enter any expression: ");
    yyparse();
    if (flag == 0)
        printf("\nEntered arithmetic expression is valid\n\n");
}

int yyerror(const char *msg) {
    printf("\nEntered arithmetic expression is invalid\n\n");
    flag = 1;
    return 0;
}


Commands
$ lex test1.l
$ bison -dy test1.y
$ gcc lex.yy.c y.tab.c -w
$ ./a.out




OUTPUT LOOKS AS BELOW:

Enter any expression: 6+4
result=10
entered arithmetic expression is valid




